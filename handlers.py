import urllib.parse
import os
import logging
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from data import questions, results
from telegram import Bot

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
STAFF_CHAT_ID = os.getenv("STAFF_CHAT_ID")

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User {user.id} started the bot with /start")
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ¬´–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?¬ª\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ ‚Äî —Ç–≤–æ–π —Ç–æ—Ç–µ–º.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /quiz –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–∏—à–∏ /help."
    )
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–ö–∞–∫ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:\n"
        "- –ù–∞–∂–º–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n"
        "- –í—ã–±–∏—Ä–∞–π –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–æ–∫.\n"
        "- –í –∫–æ–Ω—Ü–µ —Ç—ã —É–≤–∏–¥–∏—à—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.\n"
        "- –ü–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏:\n"
        "  üìã –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏.\n"
        "  üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ ‚Äî –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.\n"
        "  üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏.\n"
        "  üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–æ–æ–ø–∞—Ä–∫–∞.\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç!"
    )
    await update.message.reply_text(help_text)

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User {user.id} started the quiz with /quiz")
    context.user_data['answers'] = []
    await send_next_question(update, context)


async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = len(context.user_data['answers'])
    if index >= len(questions):
        await show_result(update, context)
        return

    q = questions[index]
    keyboard = [
        [InlineKeyboardButton(opt["text"], callback_data=str(i))] for i, opt in enumerate(q["options"])
    ]
    markup = InlineKeyboardMarkup(keyboard)

    try:
        if update.callback_query:
            await update.callback_query.message.reply_text(q["question"], reply_markup=markup)
        else:
            await update.effective_chat.send_message(q["question"], reply_markup=markup)
    except Exception as e:
        logger.exception(f"Failed to send question {index + 1}: {e}")


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = update.effective_user
    await query.answer()

    data = query.data
    logger.info(f"User {user.id} clicked button: {data}")

    if data == "restart":
        context.user_data['answers'] = []
        await query.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!")
        await send_next_question(update, context)

    elif data == "info":
        await query.message.reply_text(
            "üêæ –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏: https://moscowzoo.ru/my-zoo/become-a-guardian/"
        )

    elif data == "contact":
        await send_result_to_staff(update, context)

    elif data == "feedback":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
        context.user_data['feedback'] = True

    else:
        try:
            context.user_data.setdefault('answers', []).append(int(data))
            await send_next_question(update, context)
        except ValueError:
            logger.warning(f"Unexpected callback data: {data}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def show_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = context.user_data.get('answers', [])
    score = sum(answers) % len(results)
    name, image_path, description = results[score]

    bot_username = (await context.bot.get_me()).username
    share_link = f"https://t.me/{bot_username}"
    share_text = f"üéâ –ú–æ–π —Ç–æ—Ç–µ–º ‚Äî {name}! –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –≤ –±–æ—Ç–µ üëâ @{bot_username}"

    encoded_share_text = urllib.parse.quote(share_text)
    encoded_share_link = urllib.parse.quote(share_link)

    buttons = [
        [InlineKeyboardButton("üìã –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="info")],
        [InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="restart")],
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram",
                              url=f"https://t.me/share/url?url={encoded_share_link}&text={encoded_share_text}"),
         InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ VK",
                              url=f"https://vk.com/share.php?url={encoded_share_link}&title={encoded_share_text}")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data="contact")],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")]
    ]

    try:
        with open(image_path, 'rb') as photo:
            await update.effective_chat.send_photo(
                photo=photo,
                caption=f"üéâ –¢—ã ‚Äî {name}!\n\n{description}\n\n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        logger.info(f"User {update.effective_user.id} got result: {name}")
    except Exception as e:
        logger.exception(f"Failed to send result for user {update.effective_user.id}: {e}")
        await update.effective_chat.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")


async def send_result_to_staff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    answers = context.user_data.get('answers', [])
    score = sum(answers) % len(results)
    name, image_path, description = results[score]
    user_username = update.effective_user.username
    if user_username:
        user_info = f"{update.effective_user.full_name} (@{update.effective_user.username})"
    else:
        user_info = f"{update.effective_user.full_name}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç! –í–æ—Ç –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n" \
              f"–¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {name}\n" \
              f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" \
              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n{', '.join(str(ans) for ans in answers)}\n\n" \
              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n" \
              f"–ß–∞—Ç ID: https://web.telegram.org/a/#{update.effective_chat.id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —á–µ—Ä–µ–∑ Telegram
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(chat_id=STAFF_CHAT_ID, text=message)
        await update.callback_query.message.reply_text(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–æ–æ–ø–∞—Ä–∫–∞! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.")
    except Exception as e:
        logger.exception(f"Failed to send message to staff: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –°–±–æ—Ä –æ—Ç–∑—ã–≤–∞
    feedback = update.message.text
    logger.info(f"Received feedback from {user.id}: {feedback}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        user_username = update.effective_user.username
        if user_username:
            user_info = f"{update.effective_user.full_name} (@{update.effective_user.username})"
        else:
            user_info = f"{update.effective_user.full_name} (https://web.telegram.org/a/#{update.effective_chat.id})"
        feedback_message = (
            f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}:\n\n{feedback}"
        )
        await bot.send_message(chat_id=STAFF_CHAT_ID, text=feedback_message)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –µ–≥–æ.")
    except Exception as e:
        logger.exception(f"Failed to send feedback to staff: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞.")
async def collect_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ñ–ª–∞–≥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if context.user_data.get('feedback'):
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞
        await handle_feedback(update, context)
        context.user_data['feedback'] = False
